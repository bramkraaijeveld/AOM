float dt;
float g;
float a;
float l;

int i;

#pragma kernel Thermal

float talus;

RWTexture2D<float> terrain;
RWTexture2D<float> rock;
RWTexture2D<float> soil;

RWTexture2D<float> flux_l;
RWTexture2D<float> flux_r;
RWTexture2D<float> flux_t;
RWTexture2D<float> flux_b;


[numthreads(8,8,1)]
void Thermal (int2 id : SV_DispatchThreadID)
{	
	if (i==0){
		// Calculate Outgoing Flux as float4(L,R,T,B)
		float4 flux = float4(
			max(0, flux_r[id] + dt * a * g * (terrain[id] - terrain[id + int2(-1,  0)]) / l),
			max(0, flux_l[id] + dt * a * g * (terrain[id] - terrain[id + int2( 1,  0)]) / l),
			max(0, flux_t[id] + dt * a * g * (terrain[id] - terrain[id + int2( 0,  1)]) / l),
			max(0, flux_b[id] + dt * a * g * (terrain[id] - terrain[id + int2( 0, -1)]) / l)
		);
		
		// Flux Cannot be more than Soil
		float flux_total = flux.x + flux.y + flux.z + flux.w;
		if (flux_total > soil[id]) flux = flux / flux_total * soil[id];

		flux_l[id] = flux.x;
		flux_r[id] = flux.y;
		flux_t[id] = flux.z;
		flux_b[id] = flux.w;
	}
	if (i==1){
		// Update Soil
		//	Outflow
		soil[id] -= (flux_l[id] + flux_r[id] + flux_t[id] + flux_b[id]);

		//	Inflow
		soil[id] += (flux_l[id + int2( 1,  0)] +
					 flux_r[id + int2(-1,  0)] +
					 flux_t[id + int2( 0, -1)] +
					 flux_b[id + int2( 0,  1)]);

		// Update terrain
		terrain[id] = rock[id] + soil[id];
	}
}
